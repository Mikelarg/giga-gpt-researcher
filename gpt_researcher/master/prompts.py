import warnings
from datetime import date, datetime, timezone

from gpt_researcher.utils.enum import ReportSource, ReportType, Tone


def generate_search_queries_prompt(
    question: str,
    parent_query: str,
    report_type: str,
    max_iterations: int = 3,
):
    """Generates the search queries prompt for the given question.
    Args:
        question (str): The question to generate the search queries prompt for
        parent_query (str): The main question (only relevant for detailed reports)
        report_type (str): The report type
        max_iterations (int): The maximum number of search queries to generate

    Returns: str: The search queries prompt for the given question
    """

    if (
        report_type == ReportType.DetailedReport.value
        or report_type == ReportType.SubtopicReport.value
    ):
        return (
            f"Составь {max_iterations} поисковых запросов в Яндекс для онлайн-поиска, чтобы сформировать объективное мнение по следующей теме. "
            f'Ты должен генерировать запросы основываясь на подтеме, но учитывай контекст основной темы. Основная тема: "{parent_query}" Подтема: "{question}"'
            f'Ты должен ответить списком строк в следующем формате: ["запрос 1", "запрос 2", "запрос 3"].\n'
            f"Ответ должен содержать ТОЛЬКО список."
        )
    else:
        return (
            f'Составь {max_iterations} поисковых запросов в Яндекс для онлайн-поиска, чтобы сформировать объективное мнение по следующей теме: "{question}"'
            f'Ты должен ответить списком строк в следующем формате: ["запрос 1", "запрос 2", "запрос 3"].\n'
            f"Ответ должен содержать ТОЛЬКО список."
        )


def generate_report_prompt(
    question: str,
    context,
    report_source: str,
    report_format="apa",
    total_words=1000,
    tone=None,
):
    """Generates the report prompt for the given question and research summary.
    Args: question (str): The question to generate the report prompt for
            research_summary (str): The research summary to generate the report prompt for
    Returns: str: The report prompt for the given question and research summary
    """

    reference_prompt = ""
    if report_source == ReportSource.Web.value:
        reference_prompt = f"""
ОБЯЗАТЕЛЬНО укажи все использованные источники и их URL-адреса в конце отчёта и убедиться, что нет дублирующихся источников — только одна ссылка для каждого.
Каждый источник должен быть ссылкой. Пример: [url website](url)
Кроме того, ОБЯЗАТЕЛЬНО включи источники на соответствующие URL-адреса везде, где они упомянуты в отчёте:

Пример: Автор, А. А. (Год, Месяц Дата). Название веб-страницы. Название сайта. [url website](url)
"""
    else:
        reference_prompt = f"""
ТЫ ДОЛЖЕН указать все использованные имена исходных документов в конце отчёта в качестве ссылок и убедиться, что нет дублирующихся источников — только одна ссылка для каждого."
"""

    tone_prompt = f"Напиши отчёт в {tone.value} тоне." if tone else ""

    return f"""
Информация: 
========
{context}
========
---
Используя приведенную выше информацию, ответьте на следующий вопрос: "{question}" в подробном отчете.
Отчет должен быть сосредоточен на ответе на вопрос, быть хорошо структурированным, информативным, глубоким и всесторонним, с указанием фактов и чисел, если они доступны, и содержать минимум {total_words} слов.
Ты должен стремиться написать отчет максимально объемно, используя всю предоставленную и необходимую информацию.

Пожалуйста, следуй всем следующим рекомендациям при составлении отчета:
- Ты ДОЛЖЕН сформировать собственное обоснованное выводы на основе предоставленной информации. НЕ ДЕЛАЙ неопределенные и бессмысленные выводы.
- Ты ДОЛЖЕН написать отчет с использованием синтаксиса markdown и в формате {report_format}.
- Используй беспристрастный и журналистский тон.
- Используй внутритекстовые ссылки на источники в формате {report_format} и создавай их с помощью гиперссылок в конце предложения или абзаца следующим образом: ([внутритекстовая ссылка](url)).
- {reference_prompt}
- {tone_prompt}
- ОБЯЗАТЕЛЬНО добавь список литературы в конце отчета в формате {report_format} и полные ссылки URL без гиперссылок.
Старайся выполнить работу наилучшим образом, это очень важно для меня.
Текущая дата {date.today()}.
"""


def generate_resource_report_prompt(
    question, context, report_source: str, report_format="apa", tone=None, total_words=1000
):
    """Generates the resource report prompt for the given question and research summary.

    Args:
        question (str): The question to generate the resource report prompt for.
        context (str): The research summary to generate the resource report prompt for.

    Returns:
        str: The resource report prompt for the given question and research summary.
    """

    reference_prompt = ""
    if report_source == ReportSource.Web.value:
        reference_prompt = f"""
            ТЫ ДОЛЖЕН включить все соответствующие URL-адреса источников.
            Каждый URL должен быть гиперссылкой: [url website](url)
        """
    else:
        reference_prompt = f"""
            Ты ДОЛЖЕН указать все использованные имена исходных документов в конце отчёта в качестве ссылок и убедиться, что нет дублирующихся источников — только одна ссылка для каждого."
        """

    return (
        f'"""{context}"""\n\nНа основе приведённой выше информации создайте отчёт с рекомендациями по библиографии для следующего'
        f' вопроса или темы: "{question}". Отчёт должен содержать подробный анализ каждого рекомендованного ресурса,'
        " объясняя, как каждый источник может помочь в поиске ответов на исследовательский вопрос.\n"
        "Сосредоточься на актуальности, надёжности и значимости каждого источника.\n"
        "Убедись, что отчёт хорошо структурирован, информативен и соответствует синтаксису Markdown.\n"
        "Включай соответствующие факты, данные и цифры.\n"
        f"Отчёт должен быть длиной не менее {total_words} слов.\n"
        "ТЫ ДОЛЖЕН включить все соответствующие URL-адреса источников."
        "Каждый URL должен быть гиперссылкой: [url website](url)"
        f"{reference_prompt}"
    )


def generate_custom_report_prompt(
    query_prompt, context, report_source: str, report_format="apa", total_words=1000
):
    return f'"{context}"\n\n{query_prompt}'


def generate_outline_report_prompt(
    question, context, report_source: str, report_format="apa", total_words=1000
):
    """Generates the outline report prompt for the given question and research summary.
    Args: question (str): The question to generate the outline report prompt for
            research_summary (str): The research summary to generate the outline report prompt for
    Returns: str: The outline report prompt for the given question and research summary
    """

    return (
        f'"""{context}""" Используя приведённую выше информацию, создай структуру исследовательского отчёта в синтаксисе Markdown'
        f' для следующего вопроса или темы: "{question}". Структура должна предоставлять хорошо организованный каркас'
        " для исследовательского отчёта, включая основные разделы, подразделы и ключевые моменты, которые необходимо осветить."
        f" Исследовательский отчёт должен быть детализированным, информативным, глубоким и содержать минимум {total_words} слов."
        " Используй соответствующий синтаксис Markdown для форматирования структуры и обеспечения её читабельности."
    )


def get_report_by_type(report_type: str):
    report_type_mapping = {
        ReportType.ResearchReport.value: generate_report_prompt,
        ReportType.ResourceReport.value: generate_resource_report_prompt,
        ReportType.OutlineReport.value: generate_outline_report_prompt,
        ReportType.CustomReport.value: generate_custom_report_prompt,
        ReportType.SubtopicReport.value: generate_subtopic_report_prompt,
    }
    return report_type_mapping[report_type]


def auto_agent_instructions():
    return """
Эта задача включает исследование заданной темы, независимо от её сложности или наличия окончательного ответа. Исследование проводится определённым сервером, который определяется его типом и ролью, при этом каждый сервер требует особых инструкций.
Агент
Определяется областью темы и конкретным именем агента, который может быть использован для исследования предложенной темы. Агенты классифицируются по их области экспертизы, и каждый тип агента связан с соответствующим эмодзи.

примеры:
задача: "стоит ли инвестировать в акции Apple?"
ответ: 
{
    "server": "💰 Финансовый агент",
    "agent_role_prompt": "Ты — опытный ИИ-помощник аналитика финансов. Твоя основная задача — составлять всесторонние, продуманные, беспристрастные и методически структурированные финансовые отчёты на основе предоставленных данных и тенденций."
}
задача: "может ли перепродажа кроссовок стать прибыльной?"
ответ: 
{ 
    "server":  "📈 Агент бизнес-аналитики",
    "agent_role_prompt": "Ты — опытный ИИ-помощник бизнес-аналитика. Твоя основная цель — создавать всесторонние, проницательные, беспристрастные и систематически структурированные бизнес-отчёты на основе предоставленных бизнес-данных, рыночных тенденций и стратегического анализа."
}
задача: "какие самые интересные места в Тель-Авиве?"
ответ:
{
    "server":  "🌍 Туристический агент",
    "agent_role_prompt": "Ты — ИИ-помощник гида, объехавший весь мир. Твоя основная задача — составлять увлекательные, информативные, беспристрастные и хорошо структурированные туристические отчёты по заданным местам, включая историю, достопримечательности и культурные особенности."
}
"""


def generate_summary_prompt(query, data):
    """Generates the summary prompt for the given question and text.
    Args: question (str): The question to generate the summary prompt for
            text (str): The text to generate the summary prompt for
    Returns: str: The summary prompt for the given question and text
    """

    return (
        f'{data}\n Используя приведённый выше текст, составь его краткое содержание на основе следующей задачи или запроса: "{query}".\n Если '
        f"запрос невозможно ответить, используя текст, ТЫ ДОЛЖЕН кратко изложить текст.\n Включи всю фактическую "
        f"информацию, такую как числа, статистика, цитаты и т.д., если они доступны. "
    )


################################################################################################

# DETAILED REPORT PROMPTS


def generate_subtopics_prompt() -> str:
    return """
Основная тема:

{task}

и данные исследования:

{data}

- Составь список подтем, которые будут представлять собой заголовки разделов отчёта, создаваемого по задаче.
- Это возможный список подтем: {subtopics}.
- НЕ должно быть никаких дублирующихся подтем.
- Ограничь количество подтем до {max_subtopics}.
- В завершение отсортируй подтемы по задачам в соответствующем и осмысленном порядке, который будет представляем в подробном отчёте.

"ВАЖНО!":
- Каждая подтема ДОЛЖНА быть релевантна основной теме и предоставленным данным исследования!

{format_instructions}
"""


def generate_subtopic_report_prompt(
    current_subtopic,
    existing_headers: list,
    relevant_written_contents: list,
    main_topic: str,
    context,
    report_format: str = "apa",
    max_subsections=5,
    total_words=800,
    tone: Tone = Tone.Objective,
) -> str:
    return f"""Информация: 
=========
{context}
=========

"Основная тема и подтема":
Используя самую актуальную информацию, составь подробный отчёт по подтеме: {current_subtopic} в рамках основной темы: {main_topic}.
Необходимо ограничить количество подразделов до {max_subsections}.

"Содержание":
- Отчёт должен быть направлен на ответ на подтему
- Отчет должен быть хорошо структурированным, информативным и включать факты и цифры, если они доступны.
- Используй синтаксис Markdown и следуй формату {report_format.upper()}.

"ВАЖНО: Уникальность содержания и разделов":
- Эта часть инструкций является ОБЯЗАТЕЛЬНОЙ для обеспечения уникальности содержания и исключения совпадений с существующими отчётами.
- ВНИМАТЕЛЬНО изучи существующие заголовки и написанные материалы, приведённые ниже, прежде чем писать новые подразделы.
- !!!ИЗБЕГАЙ содержания, которое уже было освещено в существующих материалах.
- !!!НЕ ИСПОЛЬЗУЙ существующие заголовки в качестве новых заголовков подразделов.
- !!!НЕ ПОВТОРЯЙ информацию, уже освещённую в существующих материалах, или схожие варианты, чтобы избежать дублирования.
- Если ты добавляешь вложенные подразделы, ОБЯЗАТЕЛЬНО убедись, что они уникальны и не освещены в существующих материалах.
- Убедись, что твое содержание полностью новое и не пересекается с информацией, уже освещённой в предыдущих отчётах по подтемам.

"Существующие отчёты по подтемам":
- Существующие отчёты по подтемам и их заголовки разделов:
    {existing_headers}

- Существующие материалы из предыдущих отчётов по подтемам:
    {relevant_written_contents}

"Структура и форматирование":
- Поскольку этот подотчёт будет частью более крупного отчёта, напиши только основную часть, разделённую на подходящие подтемы, БЕЗ! введения и заключения.
- В ТВОЕМ ОТЧЕТЕ НЕ ДОЛЖНО БЫТЬ ПОДРАЗДЕЛА "Введение"
- В ТВОЕМ ОТЧЕТЕ НЕ ДОЛЖНО БЫТЬ ПОДРАЗДЕЛА "Заключение"
- В ТВОЕМ ТЕКСТЕ ПОСЛЕ КАЖДОЙ СМЫСЛОВ ЧАСТИ ДОЛЖЕН БЫТЬ ИСТОЧНИК ("[1](ссылка)"), откуда была взята информация для формирования этой части
- !!!ОБЯЗАТЕЛЬНО ВКЛЮЧИ В СВОЕМ ТЕКСТЕ ИСТОЧНИКИ на соответствующие URL-адреса, которые ты использовал в отчёте. ПРИМЕР:

    ### Заголовок раздела
    
    Это пример текста требущий источника. ([url website](url))

- Используй H2 для основного заголовка подтемы (##) и H3 для подразделов (###).
- Используй меньшие заголовки Markdown (например, H2 или H3) для структуры содержания, избегая использования самого большого заголовка (H1), так как он будет использоваться для заголовка более крупного отчёта.
- Организуй свое содержание в отдельные разделы, которые дополняют, но не пересекаются с существующими отчётами.
- При добавлении схожих или идентичных подразделов в свой отчёт, ты должен чётко указать различия между новым содержанием и существующими материалами из предыдущих отчётов по подтемам. Например:

    ### Новый заголовок (схож с существующим заголовком)

    В то время как предыдущий раздел обсуждал [тему А], этот раздел будет исследовать [тему Б].

"Дата":
Текущая дата — {datetime.now(timezone.utc).strftime('%B %d, %Y')}

"ВАЖНО!":
- Основное внимание ДОЛЖНО быть сосредоточено на основной теме! Ты ДОЛЖЕН исключить любую информацию, не связанную с ней!
- !!НЕ ПИШИ!! введения, заключения, резюме или раздела с источниками.
- ОБЯЗАТЕЛЬНО включи гиперссылки с синтаксисом Markdown ([url website](url)), связанные с предложениями, где это необходимо.
- ОБЯЗАТЕЛЬНО УПОМЯНИ различия между существующим и новым содержанием в отчёте, если добавляете схожие или идентичные подразделы, где это необходимо.
- Отчёт должен иметь минимальную длину {total_words} слов.
- Пиши в {tone.value} ключе на протяжении всего отчёта.
- В ТВОЕМ ТЕКСТЕ ПОСЛЕ КАЖДОЙ СМЫСЛОВ ЧАСТИ ОБЯЗАТЕЛЬНО ДОЛЖЕН БЫТЬ ИСТОЧНИК ("[1](ссылка)"), откуда была взята информация для формирования этой части

Начни свой отчет с H2 раздела с названием "{current_subtopic}"
Не забывай про подразделы H3
Не забывай добавлять источники в подразделах
Ни в коем случае не добавляй "Заключение" 
"""


def generate_draft_titles_prompt(
    current_subtopic: str, main_topic: str, context: str, max_subsections: int = 5
) -> str:
    return f"""
"Контекст":
"{context}"

"Основная тема и подтема":
Используя самую актуальную информацию, составь черновые заголовки разделов для подробного отчёта по подтеме: {current_subtopic} в рамках основной темы: {main_topic}.

"Задача":
1. Создай список черновых заголовков разделов для отчёта по подтеме.
2. Каждый заголовок должен быть кратким и соответствовать подтеме.
3. Заголовок не должен быть слишком общим, но достаточно детализированным, чтобы охватить основные аспекты подтемы.
4. Используй синтаксис Markdown для заголовков, используя H3 (###), так как H1 и H2 будут использоваться для заголовков более крупного отчёта.
5. Убедись, что заголовки охватывают основные аспекты подтемы.

"Структура и форматирование":
Предоставь черновые заголовки в формате списка, используя синтаксис Markdown, например:

### Заголовок 1
### Заголовок 2
### Заголовок 3

"ВАЖНО!":
- Основное внимание ДОЛЖНО быть сосредоточено на основной теме! Ты ДОЛЖЕН исключить любую информацию, не связанную с ней!
- НЕ должно быть введения, заключения, резюме или раздела с источниками.
- Сосредоточься исключительно на создании заголовков, а не содержимого.
"""


def generate_report_introduction(question: str, research_summary: str = "") -> str:
    return f"""{research_summary}\n
Используя приведённую выше актуальную информацию, подготовь подробное введение к отчёту на тему — {question}.
- Введение должно быть кратким, хорошо структурированным, информативным и оформленным в синтаксисе Markdown.
- Поскольку это введение будет частью более крупного отчёта, НЕ включай другие разделы, которые обычно присутствуют в отчётах.
- Перед введением должен быть заголовок H1 с подходящей темой для всего отчёта.
- Ты должен включить гиперссылки с синтаксисом Markdown ([url website](url)), связанные с предложениями, где это необходимо.
Если требуется, предположите, что текущая дата — {datetime.now(timezone.utc).strftime('%B %d, %Y')}.
"""


report_type_mapping = {
    ReportType.ResearchReport.value: generate_report_prompt,
    ReportType.ResourceReport.value: generate_resource_report_prompt,
    ReportType.OutlineReport.value: generate_outline_report_prompt,
    ReportType.CustomReport.value: generate_custom_report_prompt,
    ReportType.SubtopicReport.value: generate_subtopic_report_prompt,
}


def get_prompt_by_report_type(report_type):
    prompt_by_type = report_type_mapping.get(report_type)
    default_report_type = ReportType.ResearchReport.value
    if not prompt_by_type:
        warnings.warn(
            f"Invalid report type: {report_type}.\n"
            f"Please use one of the following: {', '.join([enum_value for enum_value in report_type_mapping.keys()])}\n"
            f"Using default report type: {default_report_type} prompt.",
            UserWarning,
        )
        prompt_by_type = report_type_mapping.get(default_report_type)
    return prompt_by_type
